// Trace server-side latency for client requests

// This script currently sets the following probes:
// t0: uprobe on _sourceCallback(), which is called as soon as the thread has received the full client request
//     from the network stack.
// t1: uretprobe on _processMessage(). Note that the response should be async (ASIO) so I doubt this will cover 
//     the time spent transmitting the response.


// Recap of server's Service State Machine:
// sourceMessage: The connection thread sleeps until it's fed the message from the network stack.
// processMessage: The connection thread processes and sinks the message back to the client.
// cleanupSession: not relevant.

// Probe on ServiceStateMachine::_sourceCallback.
// The client request is delivered to the connection thread. Does not include the time spent on the network.

uprobe:/usr/local/bin/mongod:_ZN5mongo19ServiceStateMachine15_sourceCallbackENS_6StatusE
{ 
	@source[tid] = nsecs;
}

// Return probe on ServiceStateMachine::_processMessage

uretprobe:/usr/local/bin/mongod:_ZN5mongo19ServiceStateMachine15_processMessageENS0_11ThreadGuardE / @source[tid] /
{ 
//  	printf("%d: %d ns\n", tid, nsecs - @source[tid]);

	// Generate heatmap formatted output - https://github.com/brendangregg/HeatMap
	printf("%u %u\n", elapsed / 1000, (nsecs - @source[tid]) / 1000);
  	delete(@source[tid]);
}

